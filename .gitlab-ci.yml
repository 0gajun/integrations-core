# NOTE: Unfortunately, there does not seem to be an easy way to enforce Docker
# Content Trust on GitLab Runner. Until we find a good long-term solution, a
# temporary workaround is to pin hashes of images:
# https://docs.docker.com/engine/security/trust/content_trust/#content-trust-operations-and-keys
# "For example, with content trust enabled a docker pull someimage:latest only
# succeeds if someimage:latest is signed. However, an operation with an
# explicit content hash always succeeds as long as the hash exists."
# https://gitlab.ddbuild.io/DataDog/integrations-core-job/-/jobs/23808026


stages:
  - ensure_no_concurrency
  - before_build
  - build
  - after_build_before_sign
  - sign
  - test
  - collect_garbage

ensure_no_concurrency:
  stage: ensure_no_concurrency
  tags: [ "runner:main", "size:large" ]
  image: python:alpine
  script:
    - pip install awscli requests
    - export GITLAB_TOKEN=$(aws ssm get-parameter --region us-east-1 --name ci.integrations-core.temp_gitlab_token --with-decryption --query "Parameter.Value" --out text)
    # Get all pipelines that are not yet done and that are due to run before the current pipeline
    - python .gitlab/concurrency/no_concurrency.py


before_build:
  stage: before_build
  tags: [ "runner:main", "size:large" ]
  script:
    - echo "before_build"
    - sleep 10

build:
  stage: build
  tags: [ "runner:main", "size:large" ]
  script:
    - echo "build"
    - sleep 10

after_build_before_sign:
  stage: after_build_before_sign
  tags: [ "runner:main", "size:large" ]
  script:
    - echo "after_build_before_sign"
    - sleep 10

sign:
  stage: sign
  tags: [ "runner:main", "size:large" ]
  script:
    - echo "sign"
    - sleep 10

test:
  stage: test
  tags: [ "runner:main", "size:large" ]
  script:
    - echo "test"
    - sleep 10

collect_garbage:
  stage: collect_garbage
  tags: [ "runner:main", "size:large" ]
  script:
    - echo "collect_garbage"
    - sleep 100


